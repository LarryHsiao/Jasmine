apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

def keystorePropertiesFile = file("signing/variable.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


jacoco {
    toolVersion = "0.7.9"
}
final int BUILD_VERSION = System.currentTimeMillis() / (1000 * 60 * 60) // One hour increase 1
android {
    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('../publish_key.json')
        }
    }
    signingConfigs {
        keystore {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file('signing/keystore.jks')
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.silverhetch.jasmine"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode BUILD_VERSION
        versionName "0.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.keystore
        multiDexEnabled true
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules/general.pro',
                    'proguard-rules/guava.pro'
        }
    }
    dataBinding {
        enabled true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
    productFlavors {
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}

play {
    track = 'beta'
    untrackOld = true // will untrack 'alpha' while upload to 'beta'
}

dependencies {
    kapt "com.android.databinding:compiler:3.0.1"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:1.1.51"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:preference-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.google.firebase:firebase-core:11.8.0'
    implementation 'com.google.firebase:firebase-crash:11.8.0'
    implementation 'com.google.firebase:firebase-invites:11.8.0'
    implementation 'com.google.firebase:firebase-appindexing:11.8.0'
    implementation 'com.google.firebase:firebase-firestore:11.8.0'
    implementation 'com.google.firebase:firebase-perf:11.8.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.5.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.silverhetch:aura:1.0.5@aar'
    implementation 'com.silverhetch:clotho:1.0.2'
    implementation 'com.google.guava:guava:24.0-android'
    implementation 'android.arch.lifecycle:extensions:1.1.0'
    implementation 'android.arch.persistence.room:runtime:1.0.0'
    annotationProcessor 'android.arch.lifecycle:compiler:1.1.0'
    annotationProcessor 'android.arch.persistence.room:compiler:1.0.0'
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*'
            ]

            def includes = [
                    '**/com/silverhetch/jasmine/**'
            ]
            classDirectories = fileTree(
                    dir: "${project.buildDir}/intermediates/classes/${variantName}",
                    includes: includes,
                    excludes: excludes
            ) + fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/${variantName}",
                    includes: includes,
                    excludes: excludes
            )

            sourceDirectories = files([
                    android.sourceSets.main.java.srcDirs
            ])
            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

            reports {
                xml.enabled = true
                html.enabled = true
            }

            println '##teamcity[jacocoReport ' +
                    'dataPath=\'app/build/jacoco/testDebugUnitTest.exec\' ' +
                    'includes=\'com.silverhetch.jasmine.*\' ' +
                    'excludes=\'**.BR **.Manifest *.databinding.*Binding **.*Test **.BuildConfig **.R **.R.*\' ' +
                    'classpath=\'+:**/com/silverhetch/jasmine/**\']'
        }
    }
}

apply plugin: 'com.google.gms.google-services'
